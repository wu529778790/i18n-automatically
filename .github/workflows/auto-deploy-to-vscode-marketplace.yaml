name: Auto Deploy to VS Code Marketplace and Create Release

on:
  push:
    branches:
      - main
  workflow_dispatch: # 允许手动触发

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 9

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Update version and commit
        run: |
          git config user.name 'github-actions[bot]'
          git config user.email 'github-actions[bot]@users.noreply.github.com'
          git checkout .
          npm version patch -m "chore(release): v%s [skip ci]"

      - name: Build (vite)
        run: pnpm build

      - name: Install vsce (VS Code Extension CLI)
        run: npm install -g @vscode/vsce

      - name: Publish VS Code Extension (vsce)
        run: vsce publish --no-dependencies -p ${{ secrets.VS_MARKETPLACE_TOKEN }}

      - name: Push changes
        run: |
          git push

  release:
    runs-on: ubuntu-latest
    needs: build # 等待build job完成后再执行

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # 获取完整的git历史，包括最新的版本更新

      - name: Pull latest changes
        run: git pull origin main

      - name: Set up pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 9

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Install vsce (VS Code Extension CLI)
        run: npm install -g @vscode/vsce

      - name: Build (vite)
        run: pnpm build

      - name: Package extension
        run: vsce package --no-dependencies

      - name: Get package info
        id: package
        run: |
          PACKAGE_VERSION=$(node -p "require('./package.json').version")
          PACKAGE_NAME=$(node -p "require('./package.json').name")
          echo "version=$PACKAGE_VERSION" >> $GITHUB_OUTPUT
          echo "name=$PACKAGE_NAME" >> $GITHUB_OUTPUT
          echo "vsix_file=$PACKAGE_NAME-$PACKAGE_VERSION.vsix" >> $GITHUB_OUTPUT

      - name: Generate tag name
        id: tag
        run: |
          echo "tag_name=v${{ steps.package.outputs.version }}" >> $GITHUB_OUTPUT

      - name: Check if release exists
        id: check_release
        run: |
          if git ls-remote --tags origin | grep -q "refs/tags/${{ steps.tag.outputs.tag_name }}"; then
            echo "exists=true" >> $GITHUB_OUTPUT
            echo "⚠️ Release ${{ steps.tag.outputs.tag_name }} 已存在，跳过创建"
          else
            echo "exists=false" >> $GITHUB_OUTPUT
            echo "✅ Release ${{ steps.tag.outputs.tag_name }} 不存在，将创建新release"
          fi

      - name: Create GitHub Release and Upload VSIX
        if: steps.check_release.outputs.exists == 'false'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.tag.outputs.tag_name }}
          name: Release ${{ steps.tag.outputs.tag_name }}
          body: |
            ## 🎉 新版本发布 ${{ steps.tag.outputs.tag_name }}

            ### 📦 下载地址
            - [VS Code Marketplace](https://marketplace.visualstudio.com/items?itemName=wu529778790.i18n-automatically)
            - [GitHub Release (VSIX文件)](https://github.com/${{ github.repository }}/releases/tag/${{ steps.tag.outputs.tag_name }})

            ### 📋 版本信息
            - 版本号: ${{ steps.package.outputs.version }}
            - 扩展名: ${{ steps.package.outputs.name }}

            ### 🔧 安装方式
            1. 从VS Code Marketplace安装（推荐）
            2. 下载VSIX文件后使用 `code --install-extension` 命令安装
            3. 在VS Code中使用"从VSIX安装扩展"功能

            ---
            🤖 此版本由GitHub Actions自动生成
          draft: false
          prerelease: false
          files: |
            ./${{ steps.package.outputs.vsix_file }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Release Summary
        run: |
          if [[ "${{ steps.check_release.outputs.exists }}" == "false" ]]; then
            echo "🎉 Release创建成功!"
            echo "📦 版本: ${{ steps.package.outputs.version }}"
            echo "🏷️ 标签: ${{ steps.tag.outputs.tag_name }}"
            echo "📁 VSIX文件: ${{ steps.package.outputs.vsix_file }}"
            echo "🔗 Release URL: https://github.com/${{ github.repository }}/releases/tag/${{ steps.tag.outputs.tag_name }}"
          else
            echo "⚠️ Release ${{ steps.tag.outputs.tag_name }} 已存在，未创建新release"
            echo "📦 当前版本: ${{ steps.package.outputs.version }}"
            echo "💡 如需创建新release，请先手动更新package.json中的版本号"
          fi
