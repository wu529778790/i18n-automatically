name: Dev Branch Tests

on:
  push:
    branches:
      - dev
  pull_request:
    branches:
      - dev
  workflow_dispatch: # 允许手动触发

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'yarn'

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Run ESLint
        run: yarn lint

      - name: Run VS Code Extension Tests
        run: yarn test

      - name: Validate demo test files
        run: |
          echo "验证测试示例文件..."

          # 检查必要的测试文件是否存在
          files=(
            "tests/fixtures/i18n-samples/tsx/before.tsx"
            "tests/fixtures/i18n-samples/tsx/after.tsx"
            "tests/fixtures/i18n-samples/ts/before.ts"
            "tests/fixtures/i18n-samples/ts/after.ts"
            "tests/fixtures/i18n-samples/jsx/before.jsx"
            "tests/fixtures/i18n-samples/jsx/after.jsx"
            "tests/fixtures/i18n-samples/js/before.js"
            "tests/fixtures/i18n-samples/js/after.js"
            "tests/fixtures/i18n-samples/vue/before.vue"
            "tests/fixtures/i18n-samples/vue/after.vue"
          )

          for file in "${files[@]}"; do
            if [ -f "$file" ]; then
              echo "✅ $file 存在"
            else
              echo "❌ $file 不存在"
              exit 1
            fi
          done

          echo "✅ 所有测试示例文件验证通过"

      - name: Test configuration file
        run: |
          echo "验证配置文件..."
          if [ -f "tests/fixtures/automatically-i18n-config.json" ]; then
            echo "✅ 配置文件存在"
            # 验证JSON格式是否正确
            if node -e "JSON.parse(require('fs').readFileSync('tests/fixtures/automatically-i18n-config.json', 'utf8'))"; then
              echo "✅ 配置文件JSON格式正确"
            else
              echo "❌ 配置文件JSON格式错误"
              exit 1
            fi
          else
            echo "❌ 配置文件不存在"
            exit 1
          fi

      - name: Run unit tests
        run: |
          echo "运行单元测试..."
          # 运行tests/unit目录中的具体测试文件
          if [ -f "tests/unit/jsProcessor.test.js" ]; then
            echo "✅ 找到JS处理器测试文件"
            node tests/unit/jsProcessor.test.js || echo "JS处理器测试需要完善"
          fi

          if [ -f "tests/unit/vueProcessor.test.js" ]; then
            echo "✅ 找到Vue处理器测试文件"
            node tests/unit/vueProcessor.test.js || echo "Vue处理器测试需要完善"
          fi

      - name: Run fixtures validation
        run: |
          echo "运行测试用例专项验证..."
          node tests/unit/demoTest.validation.js

      - name: Test build process
        run: |
          echo "测试扩展打包过程..."
          # 安装vsce用于测试打包
          npm install -g @vscode/vsce

          # 尝试打包扩展（不发布）
          vsce package --out test-extension.vsix

          if [ -f "test-extension.vsix" ]; then
            echo "✅ 扩展打包成功"
            # 清理测试文件
            rm test-extension.vsix
          else
            echo "❌ 扩展打包失败"
            exit 1
          fi

      - name: Test Summary
        if: always()
        run: |
          echo "🎉 Dev分支测试完成!"
          echo "包含的测试内容："
          echo "  ✅ ESLint代码检查"
          echo "  ✅ VS Code扩展测试"
          echo "  ✅ Demo测试文件验证"
          echo "  ✅ 配置文件验证"
          echo "  ✅ 单元测试执行"
          echo "  ✅ 扩展打包测试"
